How to Create a New Skill for Codex MK5

This guide outlines the steps to add a new skill (a Python function)
to your Codex MK5 AI assistant.

------------------------------------
Step 1: Create Your Skill File
------------------------------------
1.  Navigate to the `skills/` directory in your project:
    `c:\Users\gilbe\Desktop\my _jarvis\skills\`

2.  Create a new Python file for your skill(s). For example, `my_new_skill.py`.
    It's good practice to group related skills into the same file.

------------------------------------
Step 2: Define Your Skill Function
------------------------------------
Inside your new Python file (e.g., `skills/my_new_skill.py`):

1.  **Import necessary modules**:
    ```python
    # skills/my_new_skill.py
    import random # Example import
    # from some_other_library import useful_function # If you need external libraries
    ```

2.  **Define your skill function**:
    *   The function name will be used by the LLM to call the skill.
    *   The **first parameter MUST be `context`**. This is an instance of `SkillContext`
        (defined in `main.py`) and provides access to `context.speak()` and
        `context.chat_session`.
    *   Define other parameters as needed. These will be filled by the LLM based on
        the user's command. Provide default values if appropriate.
    *   Use `context.speak("Your message here")` to make the assistant talk.

    Example:
    ```python
    # skills/my_new_skill.py

    def roll_dice(context, number_of_dice: int = 1, sides: int = 6):
        """Rolls a specified number of dice with a specified number of sides."""
        if not isinstance(number_of_dice, int) or not isinstance(sides, int) or number_of_dice < 1 or sides < 2:
            context.speak("Please provide valid numbers for dice and sides.")
            return

        rolls = [random.randint(1, sides) for _ in range(number_of_dice)]
        total = sum(rolls)
        
        if number_of_dice == 1:
            context.speak(f"You rolled a {rolls[0]}.")
        else:
            context.speak(f"You rolled: {', '.join(map(str, rolls))}. Totaling {total}.")
    ```

------------------------------------
Step 3: Update the LLM Prompt (in brain.py)
------------------------------------
The LLM needs to know about your new skill so it can decide when to use it.

1.  Open `c:\Users\gilbe\Desktop\my _jarvis\brain.py`.
2.  Find the `prompt` variable within the `process_command_with_llm` function.
3.  Add your new skill to the "Your available tools are:" list.
    Describe what it does and specify its arguments clearly.

    Example addition to the prompt in `brain.py`:
    ```
    - roll_dice: Rolls dice. Optional 'number_of_dice' (integer, default 1) and 'sides' (integer, default 6) arguments.
    ```

------------------------------------
Step 4: (Automatic) Skill Loading
------------------------------------
Your `main.py` is configured to automatically detect and load any public function
(a function not starting with an underscore `_`) from `.py` files within the `skills/` directory.
So, as long as your file is in `skills/` and your function is defined correctly,
it will be available when you restart the assistant.

------------------------------------
Step 5: Test Your New Skill
------------------------------------
1.  Run `main.py`.
2.  Try giving a command that should trigger your new skill.
    For the `roll_dice` example:
    "Codex, roll a dice"
    "Codex, roll 3 dice"
    "Codex, roll two 20-sided dice"

3.  Check the `codex.log` file for any errors if things don't work as expected.

That's it! You've added a new skill to Codex MK5.