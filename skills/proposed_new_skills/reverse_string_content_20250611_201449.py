# Proposed new skill generated by Praxis on 2025-06-11T20:14:49.209015
# Task: a skill that can reverse a given string

# skills/reverse_string_content_module.py
# (Generated by Praxis Autonomous Learning Agent)

import logging

logging.basicConfig(level=logging.INFO)

def reverse_string_content(context: Any, input_string: str) -> None:
    """Reverses a given string.

    Args:
        context: The context object providing methods for interaction (speak) and user information (current_user_name).
        input_string: The string to be reversed.
    """
    try:
        reversed_string = input_string[::-1]
        context.speak(f"Hello {context.current_user_name}, the reversed string is: {reversed_string}")
        logging.info(f"Successfully reversed string '{input_string}' for user '{context.current_user_name}'.")
    except Exception as e:
        context.speak(f"An error occurred: {e}")
        logging.error(f"Error reversing string: {e}")


def _test_skill(context: Any) -> None:
    """Tests the reverse_string_content function."""
    logging.info("Starting tests for reverse_string_content skill...")
    test_cases = [
        ("hello", "olleh"),
        ("Python", "nohtyP"),
        ("", ""),
        ("12345", "54321"),
        ("racecar", "racecar"),
    ]

    for input_str, expected_output in test_cases:
        context.speak(f"Testing with input: '{input_str}'")
        logging.info(f"Testing with input: '{input_str}'")
        reverse_string_content(context, input_str)  # Simulate the function call with a mock context
        # Assertions would normally go here but are omitted because we're using context.speak for verification
        logging.info(f"Test with input '{input_str}' completed.")
    logging.info("Tests completed.")

#Dummy Context for testing purposes
class DummyContext:
    def __init__(self):
        self.current_user_name = "Tester"

    def speak(self, message):
        print(message)


if __name__ == "__main__":
    dummy_context = DummyContext()
    _test_skill(dummy_context)