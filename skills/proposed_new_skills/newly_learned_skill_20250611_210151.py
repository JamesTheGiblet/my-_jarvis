# Proposed new skill generated by Praxis on 2025-06-11T21:01:51.981321
# Task: Detect new skills in the 'proposed_new_skills' folder and test them. If more than one skill is present, prompt the user to select one by number (1, 2, 3, etc.).

# skills/skill_discovery_and_testing.py
# (Generated by Praxis Autonomous Learning Agent)

import logging
import os
import importlib
from typing import Any

logging.basicConfig(level=logging.INFO)

def newly_learned_skill(context: Any, proposed_skills_folder: str = "proposed_new_skills"):
    """Detects and tests new skills from a specified folder.

    Args:
        context: The context object provided by Praxis (includes context.speak()).
        proposed_skills_folder: The path to the folder containing proposed skill modules.  Defaults to "proposed_new_skills".
    """
    skill_files = [f for f in os.listdir(proposed_skills_folder) if f.endswith(".py") and not f.startswith("_")]

    if not skill_files:
        context.speak("No new skills found in the proposed_new_skills folder.")
        logging.info("No new skills found.")
        return

    if len(skill_files) == 1:
        skill_file = skill_files[0]
        context.speak(f"Found one skill: {skill_file}. Testing it now...")
        test_skill(context, proposed_skills_folder, skill_file)


    else:
        context.speak(f"Found multiple skills: {', '.join(skill_files)}")
        for i, skill_file in enumerate(skill_files):
            context.speak(f"{i+1}. {skill_file}")
        try:
          selection = int(context.input("Select a skill to test (enter number): ")) -1

          if 0 <= selection < len(skill_files):
            test_skill(context, proposed_skills_folder, skill_files[selection])
          else:
            context.speak("Invalid selection.")
        except ValueError:
            context.speak("Invalid input. Please enter a number.")


def test_skill(context: Any, folder_path:str, skill_file: str):
    module_name = skill_file[:-3]  # Remove .py extension
    module_path = os.path.join(folder_path, skill_file)
    try:
        spec = importlib.util.spec_from_file_location(module_name, module_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        if hasattr(module, "_test_skill"):
            logging.info(f"Testing skill: {skill_file}")
            module._test_skill(context)
            logging.info(f"Testing of {skill_file} complete.")
        else:
            context.speak(f"Error: The skill {skill_file} does not contain a _test_skill function.")

    except Exception as e:
        context.speak(f"Error testing skill {skill_file}: {e}")
        logging.exception(f"Error testing skill {skill_file}")


def _test_skill(context: Any):
    logging.info("Testing skill_discovery_and_testing")
    # This test would require creating dummy skill files in proposed_new_skills for a thorough test.
    context.speak("Testing skill discovery - requires dummy skill files in 'proposed_new_skills' folder for a complete test")
    logging.info("Test complete.")